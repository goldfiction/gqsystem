// Generated by CoffeeScript 1.6.3
(function() {
  var Log, externalIP, getCPUAverage, http, ip, log, os, osinfo;

  os = require('os');

  ip = require('ip');

  http = require('http');

  Log = "";

  log = function(obj) {
    if (!obj) {
      return Log;
    }
    if (typeof obj === 'object') {
      Log += JSON.stringify(obj, null, 2) + "\n";
    } else {
      Log += obj + "\n";
    }
    return Log;
  };

  externalIP = function(cb) {
    var result;
    result = "";
    return http.get('http://bot.whatismyipaddress.com', function(res) {
      res.setEncoding('utf8');
      res.on('data', function(chunk) {
        return result += chunk;
      });
      return res.on('end', function() {
        return cb(null, result);
      });
    });
  };

  getCPUAverage = function(cb) {
    var cpuAverage, startMeasure;
    cpuAverage = function() {
      var cpu, cpus, i, len, totalIdle, totalTick, type;
      totalIdle = 0;
      totalTick = 0;
      cpus = os.cpus();
      i = 0;
      len = cpus.length;
      while (i < len) {
        cpu = cpus[i];
        for (type in cpu.times) {
          type = type;
          totalTick += cpu.times[type];
        }
        totalIdle += cpu.times.idle;
        i++;
      }
      return {
        idle: totalIdle / cpus.length,
        total: totalTick / cpus.length
      };
    };
    startMeasure = cpuAverage();
    return setTimeout((function() {
      var endMeasure, idleDifference, percentageCPU, totalDifference;
      endMeasure = cpuAverage();
      idleDifference = endMeasure.idle - startMeasure.idle;
      totalDifference = endMeasure.total - startMeasure.total;
      percentageCPU = 100 - (~~(100 * idleDifference / totalDifference));
      cb(null, percentageCPU + '%');
    }), 100);
  };

  osinfo = function(cb) {
    var info;
    info = {};
    return externalIP(function(err, exip) {
      return getCPUAverage(function(err, cpuavg) {
        info["Hostname"] = os.hostname();
        info["OS Type"] = os.type();
        info["OS Platform"] = os.platform();
        info["OS Architecture"] = os.arch();
        info["OS Version"] = os.release();
        info["OS Uptime"] = Math.ceil(os.uptime());
        info["System Load"] = (Math.ceil(os.loadavg()[0] * 10000) / 100) + "%";
        info["OS Memory"] = Math.floor(os.freemem() / 1000000) + "MB / " + Math.floor(os.totalmem() / 1000000) + "MB (" + Math.ceil((os.totalmem() - os.freemem()) / os.totalmem() * 10000) / 100 + "%)";
        info["OS CPU"] = os.cpus()[0].model + " (" + os.cpus().length + " cores)";
        info["CPU Usage"] = cpuavg;
        info["network IP"] = ip.address();
        info["external IP"] = exip;
        info["private IP"] = os.networkInterfaces()['lo'][0]['address'];
        if (cb) {
          return cb(err, info);
        }
      });
    });
  };

  exports.osinfo = osinfo;

}).call(this);

/*
//@ sourceMappingURL=index.map
*/
